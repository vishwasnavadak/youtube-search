{"version":3,"sources":["ResultItem.js","SearchResults.js","YoutubeSearch.js","App.js","serviceWorker.js","index.js"],"names":["ResultItem","props","video","thumbnails","snippet","react_default","a","createElement","className","src","medium","url","alt","title","href","concat","id","videoId","target","SearchResults","trackScrolling","wrappedElement","document","getElementById","_this","isBottom","console","log","getMoreVideos","el","getBoundingClientRect","bottom","window","innerHeight","addEventListener","this","removeEventListener","videos","map","src_ResultItem","key","etag","Component","API_KEY","YoutubeSearch","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fetchVideos","YTSearch","term","state","keyword","maxResults","setState","handleScroll","handleInput","e","value","setTimeout","bind","assertThisInitialized","results","trim","SearchResults_SearchResults","type","onChange","placeholder","App","YoutubeSearch_YoutubeSearch","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.766c4e0a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ResultItem = props => {\n  const { video } = props;\n  let { thumbnails } = video.snippet;\n\n  return (\n    <div className=\"result-item\">\n      <img\n        className=\"video-thumbnail\"\n        src={thumbnails.medium.url}\n        alt={video.snippet.title}\n      />\n      <h4 className=\"video-title\">\n        <a\n          href={`https://www.youtube.com/watch?v=${video.id.videoId}`}\n          target=\"blank\"\n        >\n          {video.snippet.title}\n        </a>\n      </h4>\n    </div>\n  );\n};\n\nexport default ResultItem;\n","import React, { Component } from \"react\";\n\nimport ResultItem from \"./ResultItem\";\n\nexport default class SearchResults extends Component {\n  //https://stackoverflow.com/questions/45585542/detecting-when-user-scrolls-to-bottom-of-div-with-react-js/49573628\n  isBottom(el) {\n    return el.getBoundingClientRect().bottom <= window.innerHeight;\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"scroll\", this.trackScrolling);\n    console.log(\"Scroll Event Added\");\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"scroll\", this.trackScrolling);\n    console.log(\"Scroll Event Removed\");\n  }\n\n  trackScrolling = () => {\n    const wrappedElement = document.getElementById(\"root\");\n    if (this.isBottom(wrappedElement)) {\n      console.log(\"page bottom reached\");\n      this.props.getMoreVideos();\n    }\n  };\n  render() {\n    return (\n      <div className=\"results\">\n        {this.props.videos.map(video => {\n          return <ResultItem video={video} key={video.etag} />;\n        })}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport YTSearch from \"youtube-api-search\";\n\nimport SearchResults from \"./SearchResults\";\n\nconst API_KEY = \"AIzaSyCT5YNj0WpEUrt_4K8b3GZ6NoBZTOImXMA\";\n\nexport default class YoutubeSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videos: [],\n      keyword: \"\",\n      maxResults: 5\n    };\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  fetchVideos = () => {\n    YTSearch(\n      {\n        key: API_KEY,\n        term: this.state.keyword,\n        maxResults: this.state.maxResults\n      },\n      videos => {\n        //   console.log(\"TCL: YoutubeSearch -> fetchVideos -> videos\", videos);\n        this.setState({ videos: videos });\n      }\n    );\n  };\n  handleScroll = () => {\n    if (this.state.maxResults <= 45) {\n      this.setState({ maxResults: this.state.maxResults + 5 });\n      this.fetchVideos();\n      console.log(\"loading more videos\");\n    } else {\n      console.log(\"cannot load more videos\");\n    }\n  };\n  handleInput = e => {\n    let keyword = e.target.value;\n    this.setState({ keyword: keyword });\n    if (keyword !== \"\") {\n      setTimeout(() => {\n        this.fetchVideos();\n      }, 1000);\n    }\n  };\n  render() {\n    let results = <p className=\"results\">Videos will come here</p>;\n    if (this.state.keyword.trim() !== \"\") {\n      results = (\n        <SearchResults\n          videos={this.state.videos}\n          getMoreVideos={this.handleScroll}\n        />\n      );\n    }\n    return (\n      <div>\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={this.state.keyword}\n          onChange={this.handleInput}\n          placeholder=\"Type to Search\"\n        />\n        {results}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport YoutubeSearch from \"./YoutubeSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" id=\"app\">\n        <YoutubeSearch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//TODO\n// settimeout clear\n// nextpage youtube api\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}